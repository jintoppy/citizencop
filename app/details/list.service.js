"use strict";
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var lodash_1 = require("lodash");
var category_service_1 = require("../shared/category.service");
var ListService = (function () {
    function ListService(categoryService) {
        this.categoryService = categoryService;
    }
    ListService.prototype.getItemById = function (id) {
        console.log(id);
        var promise = new Promise(function (resolve, reject) {
            firebase.query(function (res) {
                console.log("Value: " + JSON.stringify(res.value));
                resolve(res.value);
            }, "/FIR/" + id, {
                singleEvent: true,
                orderBy: {
                    type: firebase.QueryOrderByType.CHILD,
                    value: 'since'
                }
            });
        });
        return promise;
    };
    ListService.prototype.getItemsOfCategory = function (categoryId) {
        var self = this;
        var promise = new Promise(function (resolve, reject) {
            self.getAllItems().then(function (items) {
                resolve(items.filter(function (item) { return item.category === categoryId; }));
            });
        });
        return promise;
    };
    ListService.prototype.getGroupedItems = function () {
        var _this = this;
        var self = this;
        var promise = new Promise(function (resolve, reject) {
            self.getAllItems().then(function (items) {
                var categories = _this.categoryService.getCategories();
                var response = lodash_1.chain(items)
                    .groupBy('category')
                    .map(function (items, name) { return ({
                    name: categories[name],
                    count: items.length
                }); })
                    .value();
                resolve(response);
            });
        });
        return promise;
    };
    ListService.prototype.getAllItems = function () {
        var promise = new Promise(function (resolve, reject) {
            firebase.query(function (res) {
                console.log("Value: " + JSON.stringify(res.value));
                resolve(res.value);
            }, '/FIR', {
                singleEvent: true,
                orderBy: {
                    type: firebase.QueryOrderByType.CHILD,
                    value: 'since'
                },
            });
        });
        return promise;
    };
    return ListService;
}());
ListService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [category_service_1.CategoryService])
], ListService);
exports.ListService = ListService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGlzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMkM7QUFDM0MsdURBQTBEO0FBQzFELGlDQUFvRDtBQUNwRCwrREFBNkQ7QUFLN0QsSUFBYSxXQUFXO0lBQ3BCLHFCQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFBRSxDQUFDO0lBQ3ZELGlDQUFXLEdBQVgsVUFBWSxFQUFFO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixJQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ3hDLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO2dCQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkIsQ0FBQyxFQUFDLFVBQVEsRUFBSSxFQUFDO2dCQUNYLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixPQUFPLEVBQUU7b0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLO29CQUNyQyxLQUFLLEVBQUUsT0FBTztpQkFDakI7YUFDSixDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELHdDQUFrQixHQUFsQixVQUFtQixVQUFVO1FBQ3pCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ3hDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLO2dCQUMxQixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxRQUFRLEtBQUssVUFBVSxFQUE1QixDQUE0QixDQUFDLENBQUMsQ0FBQztZQUNoRSxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRUQscUNBQWUsR0FBZjtRQUFBLGlCQWdCQztRQWZHLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ3hDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLO2dCQUMxQixJQUFNLFVBQVUsR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUN4RCxJQUFNLFFBQVEsR0FBRyxjQUFLLENBQUMsS0FBSyxDQUFDO3FCQUNSLE9BQU8sQ0FBQyxVQUFVLENBQUM7cUJBQ25CLEdBQUcsQ0FBQyxVQUFDLEtBQUssRUFBRSxJQUFJLElBQUssT0FBQSxDQUFDO29CQUNuQixJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQztvQkFDdEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNO2lCQUN0QixDQUFDLEVBSG9CLENBR3BCLENBQUM7cUJBQ0YsS0FBSyxFQUFFLENBQUM7Z0JBQzdCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRUQsaUNBQVcsR0FBWDtRQUNJLElBQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDeEMsUUFBUSxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUc7Z0JBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUMsTUFBTSxFQUFDO2dCQUNMLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixPQUFPLEVBQUU7b0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLO29CQUNyQyxLQUFLLEVBQUUsT0FBTztpQkFDakI7YUFDSixDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVMLGtCQUFDO0FBQUQsQ0FBQyxBQS9ERCxJQStEQztBQS9EWSxXQUFXO0lBRHZCLGlCQUFVLEVBQUU7cUNBRTRCLGtDQUFlO0dBRDNDLFdBQVcsQ0ErRHZCO0FBL0RZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcbmltcG9ydCB7IGdyb3VwQnksIGNoYWluLCBtYXAsIHZhbHVlIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IENhdGVnb3J5U2VydmljZSB9IGZyb20gJy4uL3NoYXJlZC9jYXRlZ29yeS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgVXBsb2FkSXRlbSB9IGZyb20gJy4uL3VwbG9hZC91cGxvYWRJdGVtJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExpc3RTZXJ2aWNle1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2F0ZWdvcnlTZXJ2aWNlOiBDYXRlZ29yeVNlcnZpY2Upe31cbiAgICBnZXRJdGVtQnlJZChpZCk6IFByb21pc2U8VXBsb2FkSXRlbT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhpZCk7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBmaXJlYmFzZS5xdWVyeSgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJWYWx1ZTogXCIgKyBKU09OLnN0cmluZ2lmeShyZXMudmFsdWUpKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcy52YWx1ZSk7XG4gICAgICAgICAgICB9LGAvRklSLyR7aWR9YCx7XG4gICAgICAgICAgICAgICAgc2luZ2xlRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBmaXJlYmFzZS5RdWVyeU9yZGVyQnlUeXBlLkNISUxELFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3NpbmNlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXRJdGVtc09mQ2F0ZWdvcnkoY2F0ZWdvcnlJZCk6IFByb21pc2U8QXJyYXk8VXBsb2FkSXRlbT4+IHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcbiAgICAgICAgICAgIHNlbGYuZ2V0QWxsSXRlbXMoKS50aGVuKChpdGVtcykgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5jYXRlZ29yeSA9PT0gY2F0ZWdvcnlJZCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXRHcm91cGVkSXRlbXMoKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XG4gICAgICAgICAgICBzZWxmLmdldEFsbEl0ZW1zKCkudGhlbigoaXRlbXMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYXRlZ29yaWVzID0gdGhpcy5jYXRlZ29yeVNlcnZpY2UuZ2V0Q2F0ZWdvcmllcygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gY2hhaW4oaXRlbXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ3JvdXBCeSgnY2F0ZWdvcnknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoaXRlbXMsIG5hbWUpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogY2F0ZWdvcmllc1tuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogaXRlbXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXRBbGxJdGVtcygpIDogUHJvbWlzZTxBcnJheTxVcGxvYWRJdGVtPj4ge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XG4gICAgICAgICAgICBmaXJlYmFzZS5xdWVyeSgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJWYWx1ZTogXCIgKyBKU09OLnN0cmluZ2lmeShyZXMudmFsdWUpKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcy52YWx1ZSk7XG4gICAgICAgICAgICB9LCcvRklSJyx7XG4gICAgICAgICAgICAgICAgc2luZ2xlRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBmaXJlYmFzZS5RdWVyeU9yZGVyQnlUeXBlLkNISUxELFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3NpbmNlJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxufSJdfQ==